import boto3

def get_rds_events():
    rds_client = boto3.client('rds', region_name='us-east-1')
    
    # Describe RDS events
    response = rds_client.describe_events(SourceType='db-instance')
    events = response.get('Events', [])
    open_upcoming_events = []
    
    # Filter events with status codes "open" and "upcoming"
    for event in events:
        if event['EventStatus'] in ('open', 'upcoming'):
            open_upcoming_events.append(event)
    
    return open_upcoming_events

def get_ec2_events():
    ec2_client = boto3.client('ec2', region_name='us-east-1')
    
    # Describe EC2 events
    response = ec2_client.describe_instance_status(IncludeAllInstances=True)
    events = response.get('InstanceStatuses', [])
    open_upcoming_events = []
    
    # Filter events with status codes "open" and "upcoming"
    for event in events:
        if 'Events' in event:
            for e in event['Events']:
                if e['StatusCode'] in ('open', 'upcoming'):
                    open_upcoming_events.append(e)
    
    return open_upcoming_events

def get_event_details(event_ids, event_source):
    if event_source == 'rds':
        rds_client = boto3.client('rds', region_name='us-east-1')
        response = rds_client.describe_event_categories(SourceType='db-instance')
        event_categories = response.get('EventCategoriesMapList', [])
        event_id_to_category_map = {cat['EventId']: cat['EventCategory'] for cat in event_categories}
        
        event_details = []
        for event_id in event_ids:
            response = rds_client.describe_events(EventId=event_id)
            event = response['Events'][0]
            event_category = event_id_to_category_map.get(event_id, 'Unknown')
            event_details.append({
                'EventId': event_id,
                'Category': event_category,
                'Message': event['Message'],
                'EventTime': event['EventTime'].isoformat()
            })
        
        return event_details
    elif event_source == 'ec2':
        ec2_client = boto3.client('ec2', region_name='us-east-1')
        response = ec2_client.describe_event_details(EventIds=event_ids)
        return response['InstanceEvents']
    else:
        return []

def get_affected_entities(instance_id):
    ec2_client = boto3.client('ec2', region_name='us-east-1')
    
    response = ec2_client.describe_instances(InstanceIds=[instance_id])
    instances = response.get('Reservations', [])
    
    affected_entities = []
    for instance in instances:
        for i in instance['Instances']:
            affected_entities.append({
                'InstanceId': i['InstanceId'],
                'InstanceType': i['InstanceType'],
                'AvailabilityZone': i['Placement']['AvailabilityZone'],
                'State': i['State']['Name']
            })
    
    return affected_entities

def lambda_handler(event, context):
    rds_events = get_rds_events()
    ec2_events = get_ec2_events()
    
    if not rds_events and not ec2_events:
        return {
            'statusCode': 200,
            'body': 'No open or upcoming events found.'
        }
    
    rds_event_details = get_event_details([event['EventId'] for event in rds_events], 'rds')
    ec2_event_details = get_event_details([event['InstanceEventId'] for event in ec2_events], 'ec2')
    sns_message = "The following open or upcoming events were found:\n\n"
    
    for event in rds_event_details + ec2_event_details:
        sns_message += f"Event ID: {event['EventId']}\n"
        sns_message += f"Event Category: {event['Category']}\n"
        sns_message += f"Description: {event['Message']}\n"
        sns_message += f"Event Time: {event['EventTime']}\n"
        
        if 'InstanceId' in event:
            affected_entities = get_affected_entities(event['InstanceId'])
            sns_message += "Affected Instances:\n"
            
            for entity in affected_entities:
                sns_message += f" - Instance ID: {entity['InstanceId']}, "
                sns_message += f"Type: {entity['InstanceType']}, "
                sns_message += f"Availability Zone: {entity['AvailabilityZone']}, "
                sns_message += f"State: {entity['State']}\n"
        
        sns_message += "\n"
    
    sns_client = boto3.client('sns', region_name='us-east-1')
    sns_client.publish(
        TopicArn='YOUR_SNS_TOPIC_ARN',  # Replace 'YOUR_SNS_TOPIC_ARN' with the actual ARN of your SNS topic
        Subject='AWS Events Alert',
        Message=sns_message
    )
    
    return {
        'statusCode': 200,
        'body': 'Lambda function executed successfully!'
    }